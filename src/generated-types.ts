/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    media: Media;
    'event-day': EventDay;
    'boats-journey': BoatsJourney;
    'boats-nouvel-an': BoatsNouvelAn;
    'boats-to-rent': BoatsToRent;
    'blogs-categories': BlogsCategory;
    blogs: Blog;
    'resto-categories': RestoCategory;
    restaurants: Restaurant;
    forms: Form;
    'boats-coucher-soleil': BoatsCoucherSoleil;
    submissions: Submission;
    'events-categories': EventsCategory;
    events: Event;
    'boat-parties': BoatParty;
    'sessimbra-activities': SessimbraActivity;
    'boats-arrabida': BoatsArrabida;
    'bar-categories': BarCategory;
    bars: Bar;
    sports: Sport;
    'club-categories': ClubCategory;
    club: Club;
    'boats-romatic': BoatsRomatic;
    discover: Discover;
    boats: Boat;
    'side-car-viree': SideCarViree;
    comments: Comment;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    media: MediaSelect<false> | MediaSelect<true>;
    'event-day': EventDaySelect<false> | EventDaySelect<true>;
    'boats-journey': BoatsJourneySelect<false> | BoatsJourneySelect<true>;
    'boats-nouvel-an': BoatsNouvelAnSelect<false> | BoatsNouvelAnSelect<true>;
    'boats-to-rent': BoatsToRentSelect<false> | BoatsToRentSelect<true>;
    'blogs-categories': BlogsCategoriesSelect<false> | BlogsCategoriesSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    'resto-categories': RestoCategoriesSelect<false> | RestoCategoriesSelect<true>;
    restaurants: RestaurantsSelect<false> | RestaurantsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'boats-coucher-soleil': BoatsCoucherSoleilSelect<false> | BoatsCoucherSoleilSelect<true>;
    submissions: SubmissionsSelect<false> | SubmissionsSelect<true>;
    'events-categories': EventsCategoriesSelect<false> | EventsCategoriesSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    'boat-parties': BoatPartiesSelect<false> | BoatPartiesSelect<true>;
    'sessimbra-activities': SessimbraActivitiesSelect<false> | SessimbraActivitiesSelect<true>;
    'boats-arrabida': BoatsArrabidaSelect<false> | BoatsArrabidaSelect<true>;
    'bar-categories': BarCategoriesSelect<false> | BarCategoriesSelect<true>;
    bars: BarsSelect<false> | BarsSelect<true>;
    sports: SportsSelect<false> | SportsSelect<true>;
    'club-categories': ClubCategoriesSelect<false> | ClubCategoriesSelect<true>;
    club: ClubSelect<false> | ClubSelect<true>;
    'boats-romatic': BoatsRomaticSelect<false> | BoatsRomaticSelect<true>;
    discover: DiscoverSelect<false> | DiscoverSelect<true>;
    boats: BoatsSelect<false> | BoatsSelect<true>;
    'side-car-viree': SideCarVireeSelect<false> | SideCarVireeSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: 'en' | 'fr' | 'pt';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-day".
 */
export interface EventDay {
  id: string;
  title: string;
  slug: string;
  image: string | Media;
  description: string;
  date: string;
  time: string;
  category: string | EventsCategory;
  location: string;
  featured?: boolean | null;
  prix?: string | null;
  'nombre de place'?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events-categories".
 */
export interface EventsCategory {
  id: string;
  title: string;
  description: string;
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Hex color code for category styling
   */
  color: string;
  /**
   * Select an icon that represents this category
   */
  icon:
    | 'Musique'
    | 'Art'
    | 'Cinéma'
    | 'Théâtre et spectacles'
    | 'Gastronomie'
    | 'Sport'
    | 'Famille et enfants'
    | 'Développement personnel'
    | 'Culture et tradition'
    | 'Business et réseautage'
    | 'Autres';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-journey".
 */
export interface BoatsJourney {
  id: string;
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  title: string;
  'best-seller'?: boolean | null;
  capacity: string;
  duration: string;
  prices?: string | null;
  départ?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-nouvel-an".
 */
export interface BoatsNouvelAn {
  id: string;
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  title: string;
  'best-seller'?: boolean | null;
  capacity: string;
  duration: string;
  prices?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-to-rent".
 */
export interface BoatsToRent {
  id: string;
  title: string;
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  'best-seller'?: boolean | null;
  capacity: string;
  duration: string;
  prices?: string | null;
  départ?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs-categories".
 */
export interface BlogsCategory {
  id: string;
  title: string;
  description: string;
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Hex color code for category styling
   */
  color: string;
  /**
   * Select an icon that represents this category
   */
  icon:
    | 'Musique'
    | 'Art'
    | 'Cinéma'
    | 'Théâtre et spectacles'
    | 'Gastronomie'
    | 'Sport'
    | 'Famille et enfants'
    | 'Développement personnel'
    | 'Culture et tradition'
    | 'Business et réseautage'
    | 'Autres';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: string;
  title: string;
  image: string | Media;
  description: string;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  slug: string;
  date: string;
  category: string | BlogsCategory;
  readTime: string;
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  featured?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resto-categories".
 */
export interface RestoCategory {
  id: string;
  name: string;
  slug?: string | null;
  image: string | Media;
  highlighted?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "restaurants".
 */
export interface Restaurant {
  id: string;
  name: string;
  slug: string;
  category: string | RestoCategory;
  location: string;
  mainImage: string | Media;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  description: string;
  price: number;
  contact: {
    phone: string;
    hours: string;
  };
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  highlighted?: boolean | null;
  verified?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: string;
  title?: string | null;
  steps?:
    | {
        step: {
          stepName: string;
          inputs?:
            | (
                | {
                    type:
                      | 'text'
                      | 'email'
                      | 'password'
                      | 'number'
                      | 'date'
                      | 'checkbox'
                      | 'radio'
                      | 'select'
                      | 'textarea';
                    name: string;
                    label: string;
                    placeholder?: string | null;
                    value?: string | null;
                    required?: boolean | null;
                    options?:
                      | {
                          label: string;
                          value: string;
                          id?: string | null;
                        }[]
                      | null;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'input';
                  }
                | {
                    inputs?:
                      | {
                          input: {
                            type:
                              | 'text'
                              | 'email'
                              | 'password'
                              | 'number'
                              | 'date'
                              | 'checkbox'
                              | 'radio'
                              | 'select'
                              | 'textarea';
                            name: string;
                            label: string;
                            placeholder?: string | null;
                            value?: string | null;
                            required?: boolean | null;
                            options?:
                              | {
                                  label: string;
                                  value: string;
                                  id?: string | null;
                                }[]
                              | null;
                          };
                          id?: string | null;
                        }[]
                      | null;
                    id?: string | null;
                    blockName?: string | null;
                    blockType: 'inputGroup';
                  }
              )[]
            | null;
        };
        id?: string | null;
      }[]
    | null;
  enableEmailNotifications?: boolean | null;
  emailSubject?: string | null;
  /**
   * Use {{fieldName}} to insert form field values.
   */
  emailContent?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-coucher-soleil".
 */
export interface BoatsCoucherSoleil {
  id: string;
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  title: string;
  'best-seller'?: boolean | null;
  capacity: string;
  duration: string;
  prices?: string | null;
  départ?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions".
 */
export interface Submission {
  id: string;
  form: string | Form;
  submittedData?:
    | {
        fieldName: string;
        fieldValue: string;
        id?: string | null;
      }[]
    | null;
  submittedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  title: string;
  image: string | Media;
  description: string;
  slug: string;
  date: string;
  time: string;
  category: string | EventsCategory;
  location: string;
  featured?: boolean | null;
  prix?: string | null;
  'nombre de place'?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boat-parties".
 */
export interface BoatParty {
  id: string;
  title: string;
  description: string;
  image: string | Media;
  capacity: number;
  features?:
    | {
        icon: string;
        title: string;
        description: string;
        id?: string | null;
      }[]
    | null;
  schedule: {
    days: string;
    time: string;
  };
  price: number;
  location: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessimbra-activities".
 */
export interface SessimbraActivity {
  id: string;
  title: string;
  descriptions: {
    description: string;
    id?: string | null;
  }[];
  includes: {
    include: string;
    id?: string | null;
  }[];
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-arrabida".
 */
export interface BoatsArrabida {
  id: string;
  type: 'motor' | 'sail' | 'fishingBoats' | 'SimpleBoat';
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  title: string;
  capacity: string;
  prices?:
    | {
        duration: string;
        price: string;
        id?: string | null;
      }[]
    | null;
  features?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bar-categories".
 */
export interface BarCategory {
  id: string;
  name: string;
  slug?: string | null;
  image: string | Media;
  highlighted?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bars".
 */
export interface Bar {
  id: string;
  name: string;
  slug: string;
  category: string | RestoCategory;
  location: string;
  mainImage: string | Media;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  description: string;
  price: number;
  contact: {
    phone: string;
    hours: string;
  };
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  highlighted?: boolean | null;
  verified?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sports".
 */
export interface Sport {
  id: string;
  title: string;
  image: string | Media;
  location: string;
  price: string;
  duration: string;
  includedItems: {
    item: string;
    id?: string | null;
  }[];
  badge: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "club-categories".
 */
export interface ClubCategory {
  id: string;
  name: string;
  slug?: string | null;
  image: string | Media;
  highlighted?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "club".
 */
export interface Club {
  id: string;
  name: string;
  slug: string;
  category: string | RestoCategory;
  location: string;
  mainImage: string | Media;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  description: string;
  price: number;
  contact: {
    phone: string;
    hours: string;
  };
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  highlighted?: boolean | null;
  verified?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-romatic".
 */
export interface BoatsRomatic {
  id: string;
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  title: string;
  'best-seller'?: boolean | null;
  capacity: string;
  duration: string;
  prices?: string | null;
  description?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discover".
 */
export interface Discover {
  id: string;
  title: string;
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  description: string;
  duration: string;
  price: string;
  locations: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats".
 */
export interface Boat {
  id: string;
  title: string;
  capacity: string;
  description: string;
  badge: string;
  prices?:
    | {
        duration: string;
        price: string;
        id?: string | null;
      }[]
    | null;
  features?:
    | {
        text: string;
        id?: string | null;
      }[]
    | null;
  images?:
    | {
        image: string | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "side-car-viree".
 */
export interface SideCarViree {
  id: string;
  title: string;
  images: {
    image: string | Media;
    id?: string | null;
  }[];
  description: string;
  duration: string;
  price: string;
  locations: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: string;
  authorName: string;
  description: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'event-day';
        value: string | EventDay;
      } | null)
    | ({
        relationTo: 'boats-journey';
        value: string | BoatsJourney;
      } | null)
    | ({
        relationTo: 'boats-nouvel-an';
        value: string | BoatsNouvelAn;
      } | null)
    | ({
        relationTo: 'boats-to-rent';
        value: string | BoatsToRent;
      } | null)
    | ({
        relationTo: 'blogs-categories';
        value: string | BlogsCategory;
      } | null)
    | ({
        relationTo: 'blogs';
        value: string | Blog;
      } | null)
    | ({
        relationTo: 'resto-categories';
        value: string | RestoCategory;
      } | null)
    | ({
        relationTo: 'restaurants';
        value: string | Restaurant;
      } | null)
    | ({
        relationTo: 'forms';
        value: string | Form;
      } | null)
    | ({
        relationTo: 'boats-coucher-soleil';
        value: string | BoatsCoucherSoleil;
      } | null)
    | ({
        relationTo: 'submissions';
        value: string | Submission;
      } | null)
    | ({
        relationTo: 'events-categories';
        value: string | EventsCategory;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'boat-parties';
        value: string | BoatParty;
      } | null)
    | ({
        relationTo: 'sessimbra-activities';
        value: string | SessimbraActivity;
      } | null)
    | ({
        relationTo: 'boats-arrabida';
        value: string | BoatsArrabida;
      } | null)
    | ({
        relationTo: 'bar-categories';
        value: string | BarCategory;
      } | null)
    | ({
        relationTo: 'bars';
        value: string | Bar;
      } | null)
    | ({
        relationTo: 'sports';
        value: string | Sport;
      } | null)
    | ({
        relationTo: 'club-categories';
        value: string | ClubCategory;
      } | null)
    | ({
        relationTo: 'club';
        value: string | Club;
      } | null)
    | ({
        relationTo: 'boats-romatic';
        value: string | BoatsRomatic;
      } | null)
    | ({
        relationTo: 'discover';
        value: string | Discover;
      } | null)
    | ({
        relationTo: 'boats';
        value: string | Boat;
      } | null)
    | ({
        relationTo: 'side-car-viree';
        value: string | SideCarViree;
      } | null)
    | ({
        relationTo: 'comments';
        value: string | Comment;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-day_select".
 */
export interface EventDaySelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  image?: T;
  description?: T;
  date?: T;
  time?: T;
  category?: T;
  location?: T;
  featured?: T;
  prix?: T;
  'nombre de place'?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-journey_select".
 */
export interface BoatsJourneySelect<T extends boolean = true> {
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  title?: T;
  'best-seller'?: T;
  capacity?: T;
  duration?: T;
  prices?: T;
  départ?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-nouvel-an_select".
 */
export interface BoatsNouvelAnSelect<T extends boolean = true> {
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  title?: T;
  'best-seller'?: T;
  capacity?: T;
  duration?: T;
  prices?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-to-rent_select".
 */
export interface BoatsToRentSelect<T extends boolean = true> {
  title?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  'best-seller'?: T;
  capacity?: T;
  duration?: T;
  prices?: T;
  départ?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs-categories_select".
 */
export interface BlogsCategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  color?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  image?: T;
  description?: T;
  content?: T;
  slug?: T;
  date?: T;
  category?: T;
  readTime?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  featured?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resto-categories_select".
 */
export interface RestoCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  image?: T;
  highlighted?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "restaurants_select".
 */
export interface RestaurantsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  category?: T;
  location?: T;
  mainImage?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  description?: T;
  price?: T;
  contact?:
    | T
    | {
        phone?: T;
        hours?: T;
      };
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  highlighted?: T;
  verified?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  steps?:
    | T
    | {
        step?:
          | T
          | {
              stepName?: T;
              inputs?:
                | T
                | {
                    input?:
                      | T
                      | {
                          type?: T;
                          name?: T;
                          label?: T;
                          placeholder?: T;
                          value?: T;
                          required?: T;
                          options?:
                            | T
                            | {
                                label?: T;
                                value?: T;
                                id?: T;
                              };
                          id?: T;
                          blockName?: T;
                        };
                    inputGroup?:
                      | T
                      | {
                          inputs?:
                            | T
                            | {
                                input?:
                                  | T
                                  | {
                                      type?: T;
                                      name?: T;
                                      label?: T;
                                      placeholder?: T;
                                      value?: T;
                                      required?: T;
                                      options?:
                                        | T
                                        | {
                                            label?: T;
                                            value?: T;
                                            id?: T;
                                          };
                                    };
                                id?: T;
                              };
                          id?: T;
                          blockName?: T;
                        };
                  };
            };
        id?: T;
      };
  enableEmailNotifications?: T;
  emailSubject?: T;
  emailContent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-coucher-soleil_select".
 */
export interface BoatsCoucherSoleilSelect<T extends boolean = true> {
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  title?: T;
  'best-seller'?: T;
  capacity?: T;
  duration?: T;
  prices?: T;
  départ?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "submissions_select".
 */
export interface SubmissionsSelect<T extends boolean = true> {
  form?: T;
  submittedData?:
    | T
    | {
        fieldName?: T;
        fieldValue?: T;
        id?: T;
      };
  submittedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events-categories_select".
 */
export interface EventsCategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  color?: T;
  icon?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  title?: T;
  image?: T;
  description?: T;
  slug?: T;
  date?: T;
  time?: T;
  category?: T;
  location?: T;
  featured?: T;
  prix?: T;
  'nombre de place'?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boat-parties_select".
 */
export interface BoatPartiesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  image?: T;
  capacity?: T;
  features?:
    | T
    | {
        icon?: T;
        title?: T;
        description?: T;
        id?: T;
      };
  schedule?:
    | T
    | {
        days?: T;
        time?: T;
      };
  price?: T;
  location?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessimbra-activities_select".
 */
export interface SessimbraActivitiesSelect<T extends boolean = true> {
  title?: T;
  descriptions?:
    | T
    | {
        description?: T;
        id?: T;
      };
  includes?:
    | T
    | {
        include?: T;
        id?: T;
      };
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-arrabida_select".
 */
export interface BoatsArrabidaSelect<T extends boolean = true> {
  type?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  title?: T;
  capacity?: T;
  prices?:
    | T
    | {
        duration?: T;
        price?: T;
        id?: T;
      };
  features?:
    | T
    | {
        text?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bar-categories_select".
 */
export interface BarCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  image?: T;
  highlighted?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bars_select".
 */
export interface BarsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  category?: T;
  location?: T;
  mainImage?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  description?: T;
  price?: T;
  contact?:
    | T
    | {
        phone?: T;
        hours?: T;
      };
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  highlighted?: T;
  verified?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sports_select".
 */
export interface SportsSelect<T extends boolean = true> {
  title?: T;
  image?: T;
  location?: T;
  price?: T;
  duration?: T;
  includedItems?:
    | T
    | {
        item?: T;
        id?: T;
      };
  badge?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "club-categories_select".
 */
export interface ClubCategoriesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  image?: T;
  highlighted?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "club_select".
 */
export interface ClubSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  category?: T;
  location?: T;
  mainImage?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  description?: T;
  price?: T;
  contact?:
    | T
    | {
        phone?: T;
        hours?: T;
      };
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  highlighted?: T;
  verified?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats-romatic_select".
 */
export interface BoatsRomaticSelect<T extends boolean = true> {
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  title?: T;
  'best-seller'?: T;
  capacity?: T;
  duration?: T;
  prices?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "discover_select".
 */
export interface DiscoverSelect<T extends boolean = true> {
  title?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  description?: T;
  duration?: T;
  price?: T;
  locations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "boats_select".
 */
export interface BoatsSelect<T extends boolean = true> {
  title?: T;
  capacity?: T;
  description?: T;
  badge?: T;
  prices?:
    | T
    | {
        duration?: T;
        price?: T;
        id?: T;
      };
  features?:
    | T
    | {
        text?: T;
        id?: T;
      };
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "side-car-viree_select".
 */
export interface SideCarVireeSelect<T extends boolean = true> {
  title?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  description?: T;
  duration?: T;
  price?: T;
  locations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  authorName?: T;
  description?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}